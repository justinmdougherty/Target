//To add later 4/21/2023

/*
Add a function displayAvgTime() to display the average time on the screen. This function is similar to displayShotTime().

void displayAvgTime() {
  // Clear the previous average time value displayed on the screen
  lcd.fillRect(0, 80, 320, 20, TFT_BLACK);

  // Set text color and size
  lcd.setTextColor(TFT_WHITE);
  lcd.setTextSize(2);

  // Display the new average time value
  lcd.setCursor(0, 80);
  lcd.print("Average time: ");
  lcd.print(avgTime);
  lcd.print(" ms");
}

Update the onReceive() function to calculate and display the average time after receiving a shotTriggerResponse:

} else if (incoming.startsWith("shotTriggerResponse:")) {
    int targetID = incoming.substring(18).toInt();
    long endTime = millis();
    long elapsedTime = endTime - shotTriggerTime - adjustedRoundTripTime;

    if (impactCount < numTargets) {
      impactTimes[impactCount] = elapsedTime;
      impactCount++;
    } else {
      for (int i = 0; i < numTargets - 1; i++) {
        impactTimes[i] = impactTimes[i + 1];
      }
      impactTimes[numTargets - 1] = elapsedTime;
    }

    double sum = 0;
    for (int i = 0; i < impactCount; i++) {
      sum += impactTimes[i];
    }
    avgTime = sum / impactCount;

    Serial.print("Impact time for target ");
    Serial.print(targetID);
    Serial.print(": ");
    Serial.println(elapsedTime);
    Serial.print("Average impact time: ");
    Serial.println(avgTime);

    displayShotTime(elapsedTime);
    displayAvgTime(); // Add this line to update the average time display
}



*/









#include <SPI.h>
#define LGFX_AUTODETECT
#include <LovyanGFX.hpp>
#include <LoRa.h>
#include <TinyGPS++.h>
#include <math.h>

#define SCK 42
#define MISO 41
#define MOSI 2
#define SS 1
#define rst 5
#define dio0 4


//setup TFT
static LGFX lcd;
#define ROTATION 3

//setup touch
#include <FT6x36.h>
FT6x36 ts = FT6x36();

// Soft button coordinates and dimensions
#define BUTTON_CALIBRATE_X 10
#define BUTTON_CALIBRATE_Y 100
#define BUTTON_WIDTH 100
#define BUTTON_HEIGHT 40

#define BUTTON_HIT_RESET_X 130
#define BUTTON_HIT_RESET_Y 100

#define BUTTON_AVG_RESET_X 250
#define BUTTON_AVG_RESET_Y 100

bool debugMode = true; //Turn on or off debug mode

const int triggerPin = 14;
const int triggerID = 1;

int hitCounter = 0;
float distance = 0.0;
float avgTime = 0.0;
int shotCount = 0;

TinyGPSPlus gps;
#define hs Serial1

byte localAddress = 0xBB;
byte msgCount = 0;

long startTime;
long adjustedRoundTripTime;
float baseLatitude;
float baseLongitude;
long shotTriggerTime;
const int numTargets = 10;
long impactTimes[numTargets] = { 0 };
int impactCount = 0;

const double RADIUS_OF_EARTH = 6371000;

double haversine(double lat1, double lon1, double lat2, double lon2) {
  double dLat = (lat2 - lat1) * M_PI / 180.0;
  double dLon = (lon2 - lon1) * M_PI / 180.0;

  lat1 = lat1 * M_PI / 180.0;
  lat2 = lat2 * M_PI / 180.0;

  double a = pow(sin(dLat / 2), 2) + pow(sin(dLon / 2), 2) * cos(lat1) * cos(lat2);
  double c = 2 * asin(sqrt(a));
  return RADIUS_OF_EARTH * c;
}

void setup() {
  
  hs.begin(9600);
  SPI.begin(SCK, MISO, MOSI, SS);
  LoRa.setPins(SS, rst, dio0);
  LoRa.begin(915E6);
  LoRa.onReceive(onReceive);
  LoRa.receive();

  lcd.init();
  lcd.setRotation(ROTATION);
  lcd.fillScreen(TFT_BLACK);
  lcd.setCursor(5, 25);
  lcd.setTextColor(TFT_RED);
  lcd.setTextSize(2);
  lcd.println("Loading...");
  delay(2000);
  lcd.fillScreen(TFT_BLACK);
  drawButtons();
  updateHitCounterDisplay();
  displayHitCounter();
  resetDistance();

  pinMode(triggerPin, INPUT_PULLUP);

  if (debugMode) {
    Serial.begin(115200);
    Serial.println(F("Simple GPS Location Test"));
  }
}

unsigned long previousMillis = 0;
const long interval = 1000;

void loop() {
  unsigned long currentMillis = millis();

  checkTouch();
  readCalibrateTrigger();
  readShotTrigger();

  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    onReceive(packetSize);
  }
  if (hs.available()) {
    gps.encode(hs.read());
    smartDelay(10);
  }
  if (debugMode) {
    Serial.print(F("Latitude: "));
    Serial.println(gps.location.lat(), 6);
    Serial.print(F("Longitude: "));
    Serial.println(gps.location.lng(), 6);
  }
}


void drawButtons() {
  // Draw calibrate button
  lcd.drawRect(BUTTON_CALIBRATE_X, BUTTON_CALIBRATE_Y, BUTTON_WIDTH, BUTTON_HEIGHT, TFT_WHITE);
  lcd.setCursor(BUTTON_CALIBRATE_X + 10, BUTTON_CALIBRATE_Y + 15);
  lcd.print("Calibrate");

  // Draw hit counter reset button
  lcd.drawRect(BUTTON_HIT_RESET_X, BUTTON_HIT_RESET_Y, BUTTON_WIDTH, BUTTON_HEIGHT, TFT_WHITE);
  lcd.setCursor(BUTTON_HIT_RESET_X + 10, BUTTON_HIT_RESET_Y + 15);
  lcd.print("Reset Hits");

  // Draw average time reset button
  lcd.drawRect(BUTTON_AVG_RESET_X, BUTTON_AVG_RESET_Y, BUTTON_WIDTH, BUTTON_HEIGHT, TFT_WHITE);
  lcd.setCursor(BUTTON_AVG_RESET_X + 10, BUTTON_AVG_RESET_Y + 15);
  lcd.print("Reset Avg");
}

void checkTouch() {
  uint16_t x, y;
  if (ts.touched() && touch.getXY(x, y)) {
    // Calibrate button
    if (x >= BUTTON_CALIBRATE_X && x <= BUTTON_CALIBRATE_X + BUTTON_WIDTH && y >= BUTTON_CALIBRATE_Y && y <= BUTTON_CALIBRATE_Y + BUTTON_HEIGHT) {
      startTime = millis();
      sendMessage("calibrate");
    }
    // Hit counter reset button
    if (x >= BUTTON_HIT_RESET_X && x <= BUTTON_HIT_RESET_X + BUTTON_WIDTH && y >= BUTTON_HIT_RESET_Y && y <= BUTTON_HIT_RESET_Y + BUTTON_HEIGHT) {
      resetHitCounter();
    }
    // Average time reset button
    if (x >= BUTTON_AVG_RESET_X && x <= BUTTON_AVG_RESET_X + BUTTON_WIDTH && y >= BUTTON_AVG_RESET_Y && y <= BUTTON_AVG_RESET_Y + BUTTON_HEIGHT) {
      resetAvgTime();
    }
  }
}



void getLocation() {
  while (hs.available() > 0) {
    if (gps.encode(hs.read())) {
      if (gps.location.isValid()) {
        baseLatitude = gps.location.lat();
        baseLongitude = gps.location.lng();
      }
    }
  }
}

void readCalibrateTrigger() {
  if (digitalRead(triggerPin) == LOW) {
    startTime = millis();
    sendMessage("calibrate");
  }
}

void readShotTrigger() {
  if (digitalRead(triggerPin) == LOW) {
    shotTriggerTime = millis();
    sendMessage("shotTrigger");
  }
}

void sendMessage(String message) {
  LoRa.beginPacket();
  LoRa.print(message);
  LoRa.endPacket();
}

void displayDistance() {
  // Clear the previous distance value displayed on the screen
  lcd.fillRect(0, 200, 320, 40, TFT_BLACK);

  // Set text color and size
  lcd.setTextColor(TFT_WHITE);
  lcd.setTextSize(2);

  // Display the new distance value
  lcd.setCursor(10, 200);
  lcd.print("Distance: ");
  lcd.print(distance);
  lcd.print(" m");  // Assuming distance is in meters
}

void resetDistance() {
  distance = 0.0;     // Reset the distance
  displayDistance();  // Refresh the distance display
}


void resetHitCounter() {
  hitCounter = 0;
  updateHitCounterDisplay();
}

void updateHitCounterDisplay() {
  lcd.fillRect(160, 150, 80, 20, TFT_BLACK);  // Clear the previous hit counter value
  lcd.setTextSize(2);
  lcd.setTextColor(TFT_WHITE);
  lcd.setCursor(160, 150);
  lcd.print("Target 1: ");
  lcd.print(hitCounter);
}

void displayHitCounter() {
  lcd.setCursor(10, 200);  // Adjust the position according to your layout
  lcd.setTextSize(2);
  lcd.setTextColor(TFT_WHITE, TFT_BLACK);
  lcd.print("Hits: ");
  lcd.print(hitCounter);
}

void displayShotTime(float shotTime) {
  lcd.setCursor(0, 60);
  lcd.print("Shot time: ");
  lcd.print(shotTime);
  lcd.print(" ms");
}

void displayAverageTime(float averageTime) {
  lcd.setCursor(0, 80);
  lcd.print("Average time: ");
  lcd.print(averageTime);
  lcd.print(" ms");
}

void calibrate() {
  // Add your calibration logic here
  resetDistance();
  int separator1 = incoming.indexOf(',');
  int separator2 = incoming.lastIndexOf(',');

  float targetLatitude = incoming.substring(16, separator1).toFloat();
  float targetLongitude = incoming.substring(separator1 + 1, separator2).toFloat();
  int targetID = incoming.substring(separator2 + 1).toInt();

  long endTime = millis();
  adjustedRoundTripTime = (endTime - startTime) / 2;

  float distance = haversine(baseLatitude, baseLongitude, targetLatitude, targetLongitude);
  Serial.print("Distance to target ");
  Serial.print(targetID);
  Serial.print(": ");
  Serial.println(distance);

  // Display the distance on the TFT screen
  lcd.setTextColor(TFT_WHITE);
  lcd.setTextSize(2);
  lcd.setCursor(0, 50);
  lcd.printf("Distance to target %d: %.2f meters", targetID, distance);
}


void resetAvgTime() {
  avgTime = 0;
  shotCount = 0;
  displayAvgTime();
}


void onReceive(int packetSize) {
  if (packetSize == 0) return;

  String incoming = "";
  while (LoRa.available()) {
    incoming += (char)LoRa.read();
  }

  Serial.print("Message: ");
  Serial.println(incoming);

  if (incoming.startsWith("calibrateResponse:")) {
    int separator1 = incoming.indexOf(',');
    int separator2 = incoming.lastIndexOf(',');

    float targetLatitude = incoming.substring(16, separator1).toFloat();
    float targetLongitude = incoming.substring(separator1 + 1, separator2).toFloat();
    int targetID = incoming.substring(separator2 + 1).toInt();

    long endTime = millis();
    adjustedRoundTripTime = (endTime - startTime) / 2;

    distance = haversine(baseLatitude, baseLongitude, targetLatitude, targetLongitude);  // Make sure 'distance' is declared as a global variable
    Serial.print("Distance to target ");
    Serial.print(targetID);
    Serial.print(": ");
    Serial.println(distance);

    displayDistance();  // Add this line to update the distance display

  } else if (incoming.startsWith("shotTriggerResponse:")) {
    int targetID = incoming.substring(18).toInt();
    long endTime = millis();
    long elapsedTime = endTime - shotTriggerTime - adjustedRoundTripTime;

    if (impactCount < numTargets) {
      impactTimes[impactCount] = elapsedTime;
      impactCount++;
    } else {
      for (int i = 0; i < numTargets - 1; i++) {
        impactTimes[i] = impactTimes[i + 1];
      }
      impactTimes[numTargets - 1] = elapsedTime;
    }

    double sum = 0;
    for (int i = 0; i < impactCount; i++) {
      sum += impactTimes[i];
    }
    double average = sum / impactCount;

    Serial.print("Impact time for target ");
    Serial.print(targetID);
    Serial.print(": ");
    Serial.println(elapsedTime);
    Serial.print("Average impact time: ");
    Serial.println(average);

  } else if (incoming.startsWith("hit:")) {
    int receivedTargetID = incoming.substring(4).toInt();
    if (receivedTargetID == targetID) {
      hitCounter++;
      displayHitCounter();
      Serial.println("Hit counter incremented.");
    }
  }
}


// This custom version of delay() ensures that the gps object
// is being "fed".
static void smartDelay(unsigned long ms) {
  unsigned long start = millis();
  do {
    while (ss.available())
      gps.encode(ss.read());
  } while (millis() - start < ms);
}

static void printFloat(float val, bool valid, int len, int prec) {
  if (!valid) {
    while (len-- > 1)
      Serial.print('*');
    Serial.print(' ');
  } else {
    Serial.print(val, prec);
    int vi = abs((int)val);
    int flen = prec + (val < 0.0 ? 2 : 1);  // . and -
    flen += vi >= 1000 ? 4 : vi >= 100 ? 3
                           : vi >= 10  ? 2
                                       : 1;
    for (int i = flen; i < len; ++i)
      Serial.print(' ');
  }
  smartDelay(0);
}

static void printInt(unsigned long val, bool valid, int len) {
  char sz[32] = "*****************";
  if (valid)
    sprintf(sz, "%ld", val);
  sz[len] = 0;
  for (int i = strlen(sz); i < len; ++i)
    sz[i] = ' ';
  if (len > 0)
    sz[len - 1] = ' ';
  Serial.print(sz);
  smartDelay(0);
}

static void printDateTime(TinyGPSDate &d, TinyGPSTime &t) {
  if (!d.isValid()) {
    Serial.print(F("********** "));
  } else {
    char sz[32];
    sprintf(sz, "%02d/%02d/%02d ", d.month(), d.day(), d.year());
    Serial.print(sz);
  }

  if (!t.isValid()) {
    Serial.print(F("******** "));
  } else {
    char sz[32];
    sprintf(sz, "%02d:%02d:%02d ", t.hour(), t.minute(), t.second());
    Serial.print(sz);
  }

  printInt(d.age(), d.isValid(), 5);
  smartDelay(0);
}

static void printStr(const char *str, int len) {
  int slen = strlen(str);
  for (int i = 0; i < len; ++i)
    Serial.print(i < slen ? str[i] : ' ');
  smartDelay(0);
}
