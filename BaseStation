#include <SPI.h>
#include <LoRa.h>
#include <math.h>

#define SCK 42
#define MISO 41
#define MOSI 2
#define SS 1
#define rst 5
#define dio0 4


byte localAddress = 0xFF;
int recipient;
String incoming;
byte sender;
byte incomingMsgId;
byte incomingLength;
float lat, lon;
int ID;

unsigned long adjustedRoundTripTime = 0;
const int maxTargets = 10;
TargetInfo targets[maxTargets];
int targetCount = 0;


const double RADIUS_OF_EARTH = 6371000;  // Earth's radius in meters

double haversine(double lat1, double lon1, double lat2, double lon2) {
  double dLat = (lat2 - lat1) * M_PI / 180.0;
  double dLon = (lon2 - lon1) * M_PI / 180.0;

  lat1 = lat1 * M_PI / 180.0;
  lat2 = lat2 * M_PI / 180.0;

  double a = pow(sin(dLat / 2), 2) + pow(sin(dLon / 2), 2) * cos(lat1) * cos(lat2);
  double c = 2 * asin(sqrt(a));
  return RADIUS_OF_EARTH * c;
}


void setup() {
  Serial.begin(115200);
  SPI.begin(SCK, MISO, MOSI, SS);
  Serial.println("LoRa Receiver");
  LoRa.setPins(SS, rst, dio0);

  while (!LoRa.begin(915E6)) {
    Serial.println(".");
    delay(500);
  }
  Serial.println("LoRa Initializing OK!");
}

struct TargetInfo {
  int id;
  float latitude;
  float longitude;
  double distance;
};


void loop() {
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    Serial.print("Received packet '");

    recipient = LoRa.read();       // recipient address
    sender = LoRa.read();          // sender address
    incomingMsgId = LoRa.read();   // incoming msg ID
    incomingLength = LoRa.read();  // incoming msg length

    char incomingMessage[incomingLength + 1];
    for (int i = 0; i < incomingLength; i++) {
      incomingMessage[i] = (char)LoRa.read();
    }
    incomingMessage[incomingLength] = '\0';
    incoming = String(incomingMessage);

    if (recipient == localAddress || recipient == 0xFF) {
      Serial.println("This message is for me.");
      sscanf(incoming.c_str(), "%f,%f,ID%d", &lat, &lon, &ID);

      Serial.print("ID: ");
      Serial.println(ID);
      Serial.print("Latitude: ");
      Serial.println(lat, 7);
      Serial.print("Longitude: ");
      Serial.println(lon, 7);

      // Dummy GPS coordinates 1000 meters away from the received lat/lon
      float dummyLat = lat + 0.009;
      float dummyLon = lon + 0.009;

      double distance = haversine(lat, lon, dummyLat, dummyLon);

      Serial.print("Dummy Latitude: ");
      Serial.println(dummyLat, 7);
      Serial.print("Dummy Longitude: ");
      Serial.println(dummyLon, 7);
      Serial.print("Distance to dummy coordinates: ");
      Serial.print(distance);
      Serial.println(" meters");
    }
  }
}

void onReceive(int packetSize) {
  if (packetSize == 0) return;

  int recipient = LoRa.read();
  int sender = LoRa.read();
  int incomingMsgId = LoRa.read();
  int incomingLength = LoRa.read();

  String incoming = "";
  for (int i = 0; i < incomingLength; i++) {
    incoming += (char)LoRa.read();
  }

  Serial.println("Received: " + incoming);

  if (recipient != localAddress) {
    Serial.println("This message is not for me.");
    return;
  }

  if (incoming.startsWith("calibrateResponse:")) {
    int firstComma = incoming.indexOf(",");
    int secondComma = incoming.indexOf(",", firstComma + 1);

    unsigned long sentTimestamp = incoming.substring(17, firstComma).toInt();
    unsigned long responseTimestamp = incoming.substring(firstComma + 1, secondComma).toInt();
    String gpsLocation = incoming.substring(secondComma + 1);

    unsigned long roundTripTime = millis() - sentTimestamp;
    adjustedRoundTripTime = roundTripTime - 1000;  // Subtract the 1 second GPS waiting time

    Serial.print("Adjusted Round Trip Time: ");
    Serial.println(adjustedRoundTripTime);
    Serial.print("GPS Location: ");
    Serial.println(gpsLocation);

    // Parse GPS location
    int commaIndex = gpsLocation.indexOf(",");
    float targetLatitude = gpsLocation.substring(0, commaIndex).toFloat();
    float targetLongitude = gpsLocation.substring(commaIndex + 1).toFloat();

    // Calculate distance
    double distance = haversine(baseLatitude, baseLongitude, targetLatitude, targetLongitude);
    Serial.print("Range to target ");
    Serial.print(ID);
    Serial.print(" is: ");
    Serial.print(distance);
    Serial.println(" meters");

    // Create a new TargetInfo object and populate it with the target data
    TargetInfo newTarget;
    newTarget.id = sender;  // Assuming the sender's address is the target ID
    newTarget.latitude = targetLatitude;
    newTarget.longitude = targetLongitude;
    newTarget.distance = distance;

    // Store the new target information in the array
    if (targetCount < maxTargets) {
      targets[targetCount] = newTarget;
      targetCount++;
    } else {
      Serial.println("Warning: Max targets reached. Ignoring new target.");
    }
  }
}
}
