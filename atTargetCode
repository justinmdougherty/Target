#include <SPI.h>
#include <LoRa.h>
#include <TinyGPS++.h>

//LoRa SPI pins
#define ss 8
#define rst 4
#define dio0 7

// The TinyGPSPlus object
TinyGPSPlus gps;

// The serial connection to the GPS device
#define hs Serial1

byte localAddress = 0xFF;
int recipient;
String incoming;
byte sender;
byte incomingMsgId;
byte incomingLength;

void setup() {
  Serial.begin(115200);
  Serial1.begin(9600);
  Serial.println("LoRa Receiver");
  LoRa.setPins(ss, rst, dio0);
  gps.init();

  while (!LoRa.begin(915E6)) {
    Serial.println(".");
    delay(500);
  }
  Serial.println("LoRa Initializing OK!");

  pinMode(triggerPin, INPUT_PULLUP);
  digitalWrite(13, LOW);
}

void loop() {
  if (hs.available()) {
    gps.encode(hs.read());

    smartDelay(10);
  }
}
  void onReceive(int packetSize) {
    int recipient;
    int sender;
    byte incomingMsgId;
    int incomingLength;

    if (packetSize == 0) return;

    recipient = LoRa.read();
    sender = LoRa.read();
    incomingMsgId = LoRa.read();
    incomingLength = LoRa.read();

    String incoming = "";

    while (LoRa.available()) {
      incoming += (char)LoRa.read();
    }

    Serial.print("Message: ");
    Serial.println(incoming);

    // Check if the received message is a "calibrate" message
    if (incoming.startsWith("calibrate")) {
      // Get the target's GPS location
      getLocation();

      // Create the response message
      String response = "calibrateResponse:";
      response += String(targetLatitude) + "," + String(targetLongitude) + "," + String(targetID);

      // Send the response
      sendMessage(response);
    }
  }


  String getGpsLocation() {
    smartDelay(1000);  // Wait for a short time to collect GPS data

    if (gps.location.isValid()) {
      float baseLatitude = gps.location.lat();
      float baseLongitude = gps.location.lng();

      String location = String(baseLatitude, 6) + "," + String(baseLongitude, 6);
      return location;
    } else {
      Serial.println("GPS location is not valid.");
      return "INVALID";
    }
  }

  void sendMessage(String response) {
    // Check if there's enough space for the message
    if (message.length() > 250) {
      Serial.println("Message too long.");
      return;
    }

    LoRa.beginPacket();
    LoRa.write(destination);
    LoRa.write(localAddress);
    LoRa.write(msgCount);
    LoRa.write(response.length());

    // Write the message string to the packet
    for (size_t i = 0; i < response.length(); i++) {
      LoRa.write(response[i]);
    }

    LoRa.endPacket();
    msgCount++;
  }


  // This custom version of delay() ensures that the gps object
// is being "fed".
static void smartDelay(unsigned long ms) {
  unsigned long start = millis();
  do {
    while (hs.available())
      gps.encode(hs.read());
  } while (millis() - start < ms);
}

static void printFloat(float val, bool valid, int len, int prec) {
  if (!valid) {
    while (len-- > 1)
      Serial.print('*');
    Serial.print(' ');
  } else {
    Serial.print(val, prec);
    int vi = abs((int)val);
    int flen = prec + (val < 0.0 ? 2 : 1);  // . and -
    flen += vi >= 1000 ? 4 : vi >= 100 ? 3
                           : vi >= 10  ? 2
                                       : 1;
    for (int i = flen; i < len; ++i)
      Serial.print(' ');
  }
  smartDelay(0);
}

static void printInt(unsigned long val, bool valid, int len) {
  char sz[32] = "*****************";
  if (valid)
    sprintf(sz, "%ld", val);
  sz[len] = 0;
  for (int i = strlen(sz); i < len; ++i)
    sz[i] = ' ';
  if (len > 0)
    sz[len - 1] = ' ';
  Serial.print(sz);
  smartDelay(0);
}

static void printDateTime(TinyGPSDate &d, TinyGPSTime &t) {
  if (!d.isValid()) {
    Serial.print(F("********** "));
  } else {
    char sz[32];
    sprintf(sz, "%02d/%02d/%02d ", d.month(), d.day(), d.year());
    Serial.print(sz);
  }

  if (!t.isValid()) {
    Serial.print(F("******** "));
  } else {
    char sz[32];
    sprintf(sz, "%02d:%02d:%02d ", t.hour(), t.minute(), t.second());
    Serial.print(sz);
  }

  printInt(d.age(), d.isValid(), 5);
  smartDelay(0);
}

static void printStr(const char *str, int len) {
  int slen = strlen(str);
  for (int i = 0; i < len; ++i)
    Serial.print(i < slen ? str[i] : ' ');
  smartDelay(0);
}
