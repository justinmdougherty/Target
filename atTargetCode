/*great that worked. now onto the next task. the base station is a component of this TFT and I would like to display the 
information that is gathered in each of the functions on the TFT, such as the distance to the target once the calibrate 
function is triggered, a hit counter when the atTarget code sends the and provide some soft buttons via the touch screen 
for calibrate function, and the hit counter reset.
*/

#include <SPI.h>
#include <LoRa.h>
#include <TinyGPS++.h>

#define ss 8
#define rst 4
#define dio0 7

const int targetID = 1;
const int triggerPin = 14;
float targetLatitude;
float targetLongitude;


// The TinyGPSPlus object
TinyGPSPlus gps;

// The serial connection to the GPS device
#define hs Serial1

byte localAddress = 0xFF;
int recipient;
String incoming;
byte sender;
byte incomingMsgId;
byte incomingLength;

void setup() {
  Serial.begin(115200);
  hs.begin(9600);
  Serial.println("LoRa Receiver");
  LoRa.setPins(ss, rst, dio0);
  //gps.init();

  while (!LoRa.begin(915E6)) {
    Serial.println(".");
    delay(500);
  }
  Serial.println("LoRa Initializing OK!");

  pinMode(triggerPin, INPUT_PULLUP);
  digitalWrite(14, LOW);
}

void loop() {
  if (waitForImpact()) {
    impactTriggerEvent(false);
  }

  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    onReceive(packetSize);
  }
  if (hs.available()) {
    gps.encode(hs.read());
    smartDelay(10);
  }
}


//LoRa message received function
void onReceive(int packetSize) {
  int recipient;
  int sender;
  byte incomingMsgId;
  int incomingLength;


  if (packetSize == 0) return;

  recipient = LoRa.read();
  sender = LoRa.read();
  incomingMsgId = LoRa.read();
  incomingLength = LoRa.read();

  String incoming = "";

  while (LoRa.available()) {
    incoming += (char)LoRa.read();
  }

  Serial.print("Message: ");
  Serial.println(incoming);

  if (incoming.startsWith("calibrate")) {
    getLocation();

    String calibrateResponse = "calibrateResponse:";
    calibrateResponse += String(targetLatitude) + "," + String(targetLongitude) + "," + String(targetID);

    sendMessage(calibrateResponse);

  } else if (incoming.startsWith("shotTrigger")) {
    digitalWrite(13, HIGH);
    delay(1000);
    digitalWrite(13, LOW);

    impactTriggerEvent(true);  // Call impactTriggerEvent
  }
}
//When target receives a message with the correct targetID, wait to be triggered, build message response, and send it to the base station
void impactTriggerEvent(bool shotTriggerReceived) {
  // Wait for impact
  bool impactDetected = waitForImpact();
  if (impactDetected) {
    String impactTriggerResponse = "hit:" + String(targetID);
    if (shotTriggerReceived) {
      impactTriggerResponse += ":shotTrigger";
    }
    sendMessage(impactTriggerResponse);
    Serial.println("Trigger event occurred. Message sent: " + impactTriggerResponse);
  }
}

bool waitForImpact() {
  bool impactDetected = false;
  if (digitalRead(triggerPin) == LOW) {
    impactDetected = true;
  }
  return impactDetected;
}


//LoRa response function
void sendMessage(String response) {
  int destination;
  int msgCount;

  // Check if there's enough space for the message
  if (response.length() > 250) {

    Serial.println("Message too long.");
    return;
  }

  LoRa.beginPacket();
  LoRa.write(destination);
  LoRa.write(localAddress);
  LoRa.write(msgCount);
  LoRa.write(response.length());

  // Write the message string to the packet
  for (size_t i = 0; i < response.length(); i++) {
    LoRa.write(response[i]);
  }

  LoRa.endPacket();
  msgCount++;
}

//GPS Functions Here

String getLocation() {

  smartDelay(1000);  // Wait for a short time to collect GPS data

  float targetLatitude;
  float targetLongitude;

  if (gps.location.isValid()) {
    targetLatitude = gps.location.lat();
    targetLongitude = gps.location.lng();

    String location = String(targetLatitude, 6) + "," + String(targetLongitude, 6) + "," + String(targetID);
    return location;
  } else {
    Serial.println("GPS location is not valid.");
    return "INVALID";
  }
}
// This custom version of delay() ensures that the gps object
// is being "fed".
static void smartDelay(unsigned long ms) {
  unsigned long start = millis();
  do {
    while (hs.available())
      gps.encode(hs.read());
  } while (millis() - start < ms);
}

static void printFloat(float val, bool valid, int len, int prec) {
  if (!valid) {
    while (len-- > 1)
      Serial.print('*');
    Serial.print(' ');
  } else {
    Serial.print(val, prec);
    int vi = abs((int)val);
    int flen = prec + (val < 0.0 ? 2 : 1);  // . and -
    flen += vi >= 1000 ? 4 : vi >= 100 ? 3
                           : vi >= 10  ? 2
                                       : 1;
    for (int i = flen; i < len; ++i)
      Serial.print(' ');
  }
  smartDelay(0);
}

static void printInt(unsigned long val, bool valid, int len) {
  char sz[32] = "*****************";
  if (valid)
    sprintf(sz, "%ld", val);
  sz[len] = 0;
  for (int i = strlen(sz); i < len; ++i)
    sz[i] = ' ';
  if (len > 0)
    sz[len - 1] = ' ';
  Serial.print(sz);
  smartDelay(0);
}

static void printDateTime(TinyGPSDate &d, TinyGPSTime &t) {
  if (!d.isValid()) {
    Serial.print(F("********** "));
  } else {
    char sz[32];
    sprintf(sz, "%02d/%02d/%02d ", d.month(), d.day(), d.year());
    Serial.print(sz);
  }

  if (!t.isValid()) {
    Serial.print(F("******** "));
  } else {
    char sz[32];
    sprintf(sz, "%02d:%02d:%02d ", t.hour(), t.minute(), t.second());
    Serial.print(sz);
  }

  printInt(d.age(), d.isValid(), 5);
  smartDelay(0);
}

static void printStr(const char *str, int len) {
  int slen = strlen(str);
  for (int i = 0; i < len; ++i)
    Serial.print(i < slen ? str[i] : ' ');
  smartDelay(0);
}
